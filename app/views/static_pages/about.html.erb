



  <head>
    <title>jQCloud Example</title>
  <body>
    <!-- You should explicitly specify the dimensions of the container element -->
Scales is mapping the input domain to the output range.

 	<script type="text/javascript">
// 		//Width and height
// 			var w = 500;
// 			var h = 100;
// 			var barPadding = 1;

//        var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
//                 11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ];

//                 var svg = d3.select("body")
//             .append("svg")
//             .attr("width", w)
//             .attr("height", h);

// 		svg.selectAll("rect")
//    			.data(dataset)
//    			.enter()
//    			.append("rect")
//    			.attr("fill", function(d) {
//     return "rgb(0, 0, " + (d * 10) + ")";
// })
//    			.attr("x", function(d, i) {
//     return i * (w / dataset.length);
// })
   			
//    			.attr("width", w / dataset.length - barPadding)

//    			.attr("height", function(d) {
//     return d * 4;
// })

//    			.attr("y", function(d) {
//     return h - d*4;  //Height minus data value
// });

//    	svg.selectAll("text")
//    .data(dataset)
//    .enter()
//    .append("text")
//    .text(function(d) {
//         return d;
//    })
//    .attr("x", function(d, i) {
//         return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
//     })
//    .attr("y", function(d) {
//         return h - (d * 4) + 14;  //15 is now 14
//     })
//    .attr("font-family", "sans-serif")
//    .attr("font-size", "11px")
//    .attr("fill", "white");




			var dataset = [
                [5, 0], [480, 90], [250, 50], [100, 33], [330, 95],
                [410, 12], [475, 44], [25, 67], [85, 21], [220, 88]
              ];

              var w = 1000;
 			var h = 500;
 			var padding = 30;

              var svg = d3.select("body")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

           


              d3.max(dataset, function(d) {    //Returns 480
    			return d[0];  //References first value in each sub-array
				});

              var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w - padding]);

              var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);

              var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 30]);

                    

    var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .ticks(5)  //Set rough # of ticks
                  .orient("bottom");

                  svg.append("g")
    				.attr("class", "axis")  //Assign "axis" class
    				.attr("transform", "translate(0," + (h - padding) + ")")
    				.call(xAxis);

    				var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);

                  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + padding + ",0)")
    .call(yAxis);


                     svg.selectAll("circle")
					   	.data(dataset)
					   .enter()
					   .append("circle")
					   .style("fill","red")

					   .on("mouseover", function(){
					   		 d3.select(this).transition()
					   		.style("fill", "green"); // make the body green
					   })

					   .on("mouseout", function(){
					   		 d3.select(this).transition()
					   		  .style("fill", "red") ;// then transition to red
					   })

					   .on("click", function(){
					   		 d3.select(this).transition()
					   		  .attr("r", 40) ;// then transition to red
					   })
					   
					   
 
  
					   .attr("cx", function(d) {
					    	return xScale(d[0]);
						})
					   .attr("cy", function(d) {
					    	return yScale(d[1]);
						})
					   .attr("r", function(d) {
    						return rScale(d[1]);
						});

					 svg.selectAll("text")
					 	.data(dataset)
					 	.enter()
					 	.append("text")
					 	.text(function(d) {
         					return d[0] + "," + d[1];
				    	})
					 	.attr("x", function(d) {
    						return xScale(d[0]);
						})
					 	.attr("y", function(d) {
    						return yScale(d[1]);
						})
					 	.attr("font-family", "sans-serif")
    					.attr("font-size", "11px")
    					.attr("fill", "red");


         </script>

  </body>